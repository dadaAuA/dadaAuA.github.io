{"meta":{"title":"dada","subtitle":"","description":"","author":"dada","url":"https://dadaAuA.github.io","root":"/"},"pages":[{"title":"404","date":"2022-06-23T04:58:09.151Z","updated":"2022-06-23T04:58:09.151Z","comments":true,"path":"404.html","permalink":"https://dadaaua.github.io/404.html","excerpt":"","text":"很抱歉，您访问的页面去月球了~~ 送我回家","author":"青云工作室"},{"title":"","date":"2022-06-23T04:58:09.151Z","updated":"2022-06-23T04:58:09.151Z","comments":true,"path":"sw.js","permalink":"https://dadaaua.github.io/sw.js","excerpt":"","text":"const CACHE_NAME = 'ICDNCache'; let cachelist = []; self.addEventListener('install', async function (installEvent) { self.skipWaiting(); installEvent.waitUntil( caches.open(CACHE_NAME) .then(function (cache) { console.log('Opened cache'); return cache.addAll(cachelist); }) ); }); self.addEventListener('fetch', async event => { try { event.respondWith(handle(event.request)) } catch (msg) { event.respondWith(handleerr(event.request, msg)) } }); const handleerr = async (req, msg) => { return new Response(`CDN分流器遇到了致命错误 ${msg}`, { headers: { \"content-type\": \"text/html; charset=utf-8\" } }) } let cdn = {//镜像列表 \"gh\": { jsdelivr: { \"url\": \"https://cdn.jsdelivr.net/gh\" }, jsdelivr_fastly: { \"url\": \"https://fastly.jsdelivr.net/gh\" }, jsdelivr_gcore: { \"url\": \"https://gcore.jsdelivr.net/gh\" } }, \"combine\": { jsdelivr: { \"url\": \"https://cdn.jsdelivr.net/combine\" }, jsdelivr_fastly: { \"url\": \"https://fastly.jsdelivr.net/combine\" }, jsdelivr_gcore: { \"url\": \"https://gcore.jsdelivr.net/combine\" } }, \"npm\": { eleme: { \"url\": \"https://npm.elemecdn.com\" }, jsdelivr: { \"url\": \"https://cdn.jsdelivr.net/npm\" }, zhimg: { \"url\": \"https://unpkg.zhimg.com\" }, unpkg: { \"url\": \"https://unpkg.com\" }, bdstatic: { \"url\": \"https://code.bdstatic.com/npm\" }, tianli: { \"url\": \"https://cdn1.tianli0.top/npm\" }, sourcegcdn: { \"url\": \"https://npm.sourcegcdn.com/npm\" } } } //主控函数 const handle = async function (req) { const urlStr = req.url const domain = (urlStr.split('/'))[2] let urls = [] for (let i in cdn) { for (let j in cdn[i]) { if (domain == cdn[i][j].url.split('https://')[1].split('/')[0] && urlStr.match(cdn[i][j].url)) { urls = [] for (let k in cdn[i]) { urls.push(urlStr.replace(cdn[i][j].url, cdn[i][k].url)) } if (urlStr.indexOf('@latest/') > -1) { return lfetch(urls, urlStr) } else { return caches.match(req).then(function (resp) { return resp || lfetch(urls, urlStr).then(function (res) { return caches.open(CACHE_NAME).then(function (cache) { cache.put(req, res.clone()); return res; }); }); }) } } } } return fetch(req) } const lfetch = async (urls, url) => { let controller = new AbortController(); const PauseProgress = async (res) => { return new Response(await (res).arrayBuffer(), { status: res.status, headers: res.headers }); }; if (!Promise.any) { Promise.any = function (promises) { return new Promise((resolve, reject) => { promises = Array.isArray(promises) ? promises : [] let len = promises.length let errs = [] if (len === 0) return reject(new AggregateError('All promises were rejected')) promises.forEach((promise) => { promise.then(value => { resolve(value) }, err => { len-- errs.push(err) if (len === 0) { reject(new AggregateError(errs)) } }) }) }) } } return Promise.any(urls.map(urls => { return new Promise((resolve, reject) => { fetch(urls, { signal: controller.signal }) .then(PauseProgress) .then(res => { if (res.status == 200) { controller.abort(); resolve(res) } else { reject(res) } }) }) })) }"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-06-23T04:58:09.151Z","updated":"2022-06-23T04:58:09.151Z","comments":true,"path":"posts/16107.html","link":"","permalink":"https://dadaaua.github.io/posts/16107.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"github图床之弃用jsd(图床使用npm镜像加速)","slug":"作者太懒了没有标题","date":"2022-04-05T06:20:57.000Z","updated":"2022-06-23T04:58:09.151Z","comments":true,"path":"posts/34886.html","link":"","permalink":"https://dadaaua.github.io/posts/34886.html","excerpt":"","text":"啦啦啦","categories":[{"name":"hexo","slug":"hexo","permalink":"https://dadaaua.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dadaaua.github.io/tags/hexo/"},{"name":"cdn","slug":"cdn","permalink":"https://dadaaua.github.io/tags/cdn/"},{"name":"加速","slug":"加速","permalink":"https://dadaaua.github.io/tags/%E5%8A%A0%E9%80%9F/"}],"author":"青云工作室"}],"categories":[{"name":"hexo","slug":"hexo","permalink":"https://dadaaua.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dadaaua.github.io/tags/hexo/"},{"name":"cdn","slug":"cdn","permalink":"https://dadaaua.github.io/tags/cdn/"},{"name":"加速","slug":"加速","permalink":"https://dadaaua.github.io/tags/%E5%8A%A0%E9%80%9F/"}]}